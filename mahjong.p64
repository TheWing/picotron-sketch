picotron cartridge // www.picotron.net
version 2

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIzIDAzOjI5OjQzIixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NTozMCIscnVudGltZT03LHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEj
MTE3Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ0aWxlcy5sdWEjMzAiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249InBsYXllcnMubHVhIzE1Iix3b3Jrc3BhY2VfaW5kZXg9MX0s
e2xvY2F0aW9uPSJldmFsLmx1YSMxMDgiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InV0
aWwubHVhIzUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImJvYXJkLmx1YSMxIix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7
bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAu
c2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV1sejQABAAAAAMAAAAwbmls
:: gfx/
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIyIDIwOjUwOjU4Iixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NTozMCJdXWx6NAAEAAAAAwAAADBuaWw=
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIyIDIwOjUwOjU5Iixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NDo1NiIscmV2aXNpb249MjU3OV1dbHo0ALcAAAAXMQAA8xV7WzBdPXtibXA9cHh1
AEMgEBgE8P9xLGZsYWdzPTAscGFuX3gIANd5PTAsem9vbT0xMH0sMwAQGDMALP8yNAAzLjI1NwBC
LTAuNToAGTc5AF8QEATw8GsACx84MQDwXyAE8P-xMgALHzVjAB4PiQH-NgHcAgM1AADyAg9pAB0P
MQD-----------------------------------------------------------_sUG09OH19
:: map/
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIyIDIwOjUwOjU4Iixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NTozMCJdXWx6NAAEAAAAAwAAADBuaWw=
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIyIDIwOjUwOjU5Iixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NDo1NiIscmV2aXNpb249MjU2MF1dbHo0AFsAAABLEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------7oSIpLHBhbl94PTAIANJ5PTAsdGlsZV9o
PTI0CgDQdz0xNix6b29tPTF9fQ==
:: sfx/
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIyIDIwOjUwOjU4Iixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NTozMCJdXWx6NAAEAAAAAwAAADBuaWw=
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTIyIDIwOjUwOjU5Iixtb2RpZmllZD0iMjAyNC0w
Ny0yNCAxOTo1NDo1NiIscmV2aXNpb249MjU1NV1dbHo0AMsBAAA9FQAA-ytweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIIBAUGBwEP_JAIBAoIBA8NDw4PDwIP_PD-AQDr-SbSARAGDyAQ
ASABIAHwAAIQAgwQASAPISABMA7www8oD--wxg-4Cg--D4AP9w8NAfAJARAGDC8A8AIPDhABMA9u
kA8RAiAMUAEPfw8A-wr-oAggD3IgD4ggD0LwAwkgDxMgC-BvAfDHUQAQECBAAAFPAN8PDVABBBAB
AiAPYPCjPQACD70ACg8vAP------Ix--AQCs_iXIDgANCDAPMA8xDzMfNQ80DzMPMf--KHHzKHzz
KPBwDgANQA83DzgPOQ86DzsPPA89Dz7zHgD3AyQPJQ8mDycPKA8pDyIPI-Moch4AIPOwCAD0DQoO
ME8aI08fI08cEwUvIQ8ePxlPGhMHPx8-HkURAPEHRCNEI0QT1BPUE4RMI0wjTBPcE9wTjD4ABEYA
DAgAkA4wPy0jDyo-LwUA8AIrLygPLSMJYwkjDyofLxMbExIA-xQJcz8DI0YjhiMGYwYjJhMWE3Zz
PCNMI4wjDGMMIywTHBN8c1oAAgMIAB8NCAD---------------8KUPOw8P85
:: board.lua
--[[pod_format="raw",created="2024-07-24 18:54:09",modified="2024-07-24 19:54:56",revision=96]]
function draw_hand(s,m)
	for i=1,#hand1 do
		if turn%4==0 or i<14 then 
			til=hand1[i]
			local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
			local ii=i%(17*2)
			x=W/5+i*(w+2)
			if i==14 then x=x+4 end
			y=H-h*1.5
			if s==i then 
				if m==1 then y=y-h/4 end
				y=y-h/4 
			end
			if i==14 and turn%4>0 then 
				tile(til[1],til[2],x,y,w,h,col,0)
			else
				tile(til[1],til[2],x,y,w,h,col,1)
			end
		end
	end
end

function draw_other_hands(o)
	local form={-5,-1,-4}
	if o then form={3,2,3} end
	for i=1,#hand4 do
		til=hand4[i]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		local ii=i%(17*2)
		w=w*(1-(13-i)*0.02)
		x=18+(13-i)*2
		y=30+i*(w*0.8)
		tile(til[1],til[2],x,y,w,h,col,form[1])
	end
	for i=1,#hand3 do
		til=hand3[i]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		local ii=i%(17*2)
		w=w*0.7
		x=W/3.5+i*(w+2)
		y=10
		tile(til[1],til[2],x,y,w,w*1.5,col,form[2])
	end
	for i=1,#hand2 do
		til=hand2[i]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		local ii=i%(17*2)
		w=w*(1-(13-i)*0.02)
		x=W-18-w-(13-i)*2
		y=30+i*(w*0.8)
		tile(til[1],til[2],x,y,w,w*1.5,col,form[3])
	end
end

function draw_opens()
	for i=1,#open1 do
		til=open1[i]
		local x,y,w,col=0,0,til[5],til[6]
		x=W-i*(w+2)-10
		y=H-w*1.5-4
		tile(til[1],til[2],x,y,w,w*1.5,col,2+til[9])
	end
	for i=1,#open3 do
		til=open3[i]
		local x,y,w,col=0,0,10,til[6]
		x=i*(w+2)+40
		y=w*1.5-4
		tile(til[1],til[2],x,y,w,w*1.5,col,2+til[9])
	end
	for i=1,#open4 do
		til=open4[i]
		local x,y,w,col=0,0,10,til[6]
		y=H-i*(w*1.5+1)-4
		x=10
		tile(til[1],til[2],x,y,w,w*1.5,col,3+til[9])
	end
	for i=1,#open4 do
		til=open4[i]
		local x,y,w,col=0,0,10,til[6]
		y=i*(w*1.5+1)-4
		x=W-w-10
		tile(til[1],til[2],x,y,w,w*1.5,col,3+til[9])
	end
end

function draw_wall()
	for i=1,#wall do
		til=wall[i]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		local ii=i%(17*2)
		w=8
		h=10
		x=((i+1)//2)*(w+2)
		y=200+i%2*h/2
		tile(til[1],til[2],x,y,w,h,col,0)	
	end
end

function draw_ponds()
	for i=1,#pond1 do
		til=pond1[i]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		w=12
		h=w*1.5
		x=W/2.4+((i-1)%6)*(w+2)
		y=H/1.8+(i-1)//6*(h+3)
		tile(til[1],til[2],x,y,w,h,col,2)	
	end	
	for i=1,#pond2 do
		local ii=#pond2-i
		til=pond2[ii+1]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		w=12
		h=w*1.5
		y=H/5*3-((ii)%6)*(w+2)
		x=W/3*1.8+(ii)//6*(h+3)
		tile(til[1],til[2],x,y,w,h,col,3)	
	end	
	for i=1,#pond3 do
		local ii=#pond3-i
		til=pond3[ii+1]
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		w=12
		h=w*1.5
		x=W/1.77-((ii)%6)*(w+2)
		y=H/2.8-(ii)//6*(h+3)
		tile(til[1],til[2],x,y,w,h,col,2)		
	end	
	for i=1,#pond4 do
		til=pond4[i]
		local ii=i-1
		local x,y,w,h,col=0,0,til[5],til[5]*1.5,til[6]
		w=12
		h=w*1.5
		y=H/5*1.7+((ii)%6)*(w+2)
		x=W/3*1.1-(ii)//6*(h+3)
		tile(til[1],til[2],x,y,w,h,col,3)	
	
	end	
end
:: designs.lua
--[[pod_format="raw",created="2024-07-22 22:12:18",modified="2024-07-23 01:05:19",revision=1896]]
GREEN=3
RED=8+16
BLUE=16
WHITE=7

------ BASE -------
function pill(x,y,w,h,d,col)
	local r=d
	color(col)
	if r>0 then 
		rectfill(x+r,y,x+w-r,y+h)
		rectfill(x,y+r,x+w,y+h-r)
		circfill(x+r,y+r,r)
		circfill(x+w-r,y+r,r)
		circfill(x+r,y+h-r,r)
		circfill(x+w-r,y+h-r,r)
	else
		rectfill(x,y,x+w,y+h)
	end
end

------- PINS -------
function pin_o(x,y,s,col)
	circfill(x,y,s,col)
	circfill(x,y,s*0.8,RED)
	circfill(x,y,s*0.4,WHITE)
end
function pin_c(x,y,s,col)
	circfill(x,y,s,col)
end

function pin(x,y,w,h,num)
	if num>0 and num<10 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
	end
	if num==1 then
		pin_o(x+w/2,y+h/2,w/2.2,GREEN)
	elseif num==2 then 
		pin_c(x+w/2,y+h/3-h/24,w/4,BLUE)
		pin_c(x+w/2,y+h/3*2+h/24,w/4,GREEN)
	elseif num==3 then 
		pin_c(x+w/4,y+h/4,w/5,BLUE)
		pin_c(x+w/2,y+h/2,w/5,RED)
		pin_c(x+w/4*3,y+h/4*3,w/5,GREEN)
	elseif num==4 then 
		pin_c(x+w/4,y+h/4,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4*3,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4,w/5,BLUE)
		pin_c(x+w/4,y+h/4*3,w/5,BLUE)
	elseif num==5 then 
		pin_c(x+w/4,y+h/4,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4*3,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4,w/5,BLUE)
		pin_c(x+w/4,y+h/4*3,w/5,BLUE)
		pin_c(x+w/2,y+h/2,w/5,RED)
	elseif num==6 then
		pin_c(x+w/4+w/16,y+h/6*3+h/24,w/6,RED)
		pin_c(x+w/4+w/16,y+h/6*5-h/24,w/6,RED)
		pin_c(x+w/4*3-w/16,y+h/6*3+h/24,w/6,RED)
		pin_c(x+w/4*3-w/16,y+h/6*5-h/24,w/6,RED)
		pin_c(x+w/4+w/16,y+h/6*2-h/12,w/6,GREEN)
		pin_c(x+w/4*3-w/16,y+h/6*2-h/12,w/6,GREEN)
	elseif num==7 then
		pin_c(x+w/4+w/16,y+h/6*3+h/24,w/7,RED)
		pin_c(x+w/4+w/16,y+h/6*5-h/24,w/7,RED)
		pin_c(x+w/4*3-w/16,y+h/6*3+h/24,w/7,RED)
		pin_c(x+w/4*3-w/16,y+h/6*5-h/24,w/7,RED)
		pin_c(x+w/4-w/16,y+h/6*1+h/24,w/7,GREEN)
		pin_c(x+w/2,y+h/6*2-h/12,w/7,GREEN)
		pin_c(x+w/4*3+w/16,y+h/6*2-h/24,w/7,GREEN)
	elseif num==8 then
		pin_c(x+w/3,y+h/9*2,w/8,BLUE)
		pin_c(x+w/3,y+h/9*4,w/8,BLUE)
		pin_c(x+w/3,y+h/9*6-h/24,w/8,BLUE)
		pin_c(x+w/3,y+h/9*8-h/24,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*2,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*4,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*6-h/24,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*8-h/24,w/8,BLUE)
	elseif num==9 then
		pin_c(x+w/6+w/16,y+h/6*1.5,w/6,BLUE)
		pin_c(x+w/6*3,y+h/6*1.5,w/6,BLUE)
		pin_c(x+w/6*5,y+h/6*1.5,w/6,BLUE)
		pin_c(x+w/6+w/16,y+h/6*3,w/6,RED)
		pin_c(x+w/6*3,y+h/6*3,w/6,RED)
		pin_c(x+w/6*5,y+h/6*3,w/6,RED)
		pin_c(x+w/6+w/16,y+h/6*4.5,w/6,GREEN)
		pin_c(x+w/6*3,y+h/6*4.5,w/6,GREEN)
		pin_c(x+w/6*5,y+h/6*4.5,w/6,GREEN)
	end
end

------- BAMBOO -------

function bam_o(x,y,w,h)
	local i=0
	--bird??
	line(x-w,y,x+w+1,y,GREEN)
	line(x-w,y+2,x+w+1,y+2,GREEN)
	pset(x-w,y+1,GREEN)
	pset(x+w+1,y+1,GREEN)
	for i=0,6,2 do
		line(x+w/20*i-w/4,y,x-w/8+w/8*i,y+h/1.5+h/20*(6-i),BLUE)
		line(x+w/12*i-w/3,y,x+w/6+w/12*i,y-h/3,GREEN)
		line(x+w/10*i,y-h/1.8,x+w/6+w/12*i,y-h/3,GREEN)
		line(x+w/10*i,y-h/1.8,x+w/4,y-h/1.1,RED)
		line(x,y-w/10*i,x-w/1.2,y-w/5*i,BLUE)
	end
	circfill(x+w/3,y-h/2,(w/h)*w/1.4,WHITE)
	circ(x+w/3,y-h/2,(w/h)*w/1.4,RED)
	pset(x+w/3,y-h/2,RED)
end

function bam_c(x,y,w,h,a,col)
	local ma,mi=max(w,h),min(w,h)
	ma=ma*0.8
	mi=mi*0.8
	color(col)
	if a==1 then
		line(x+ma-mi,y-ma-mi,x-ma-mi,y+ma-mi)
		line(x+ma+mi,y-ma+mi,x-ma+mi,y+ma+mi)
		line(x+ma-mi,y-ma-mi,x+ma+mi,y-ma+mi)
		line(x-ma-mi,y+ma-mi,x-ma+mi,y+ma+mi)
		line(x-mi,y-mi,x+mi,y+mi)
	elseif a==2 then
		line(x-ma+mi,y-ma-mi,x+ma+mi,y+ma-mi)
		line(x-ma-mi,y-ma+mi,x+ma-mi,y+ma+mi)
		line(x-ma+mi,y-ma-mi,x-ma-mi,y-ma+mi)
		line(x+ma+mi,y+ma-mi,x+ma-mi,y+ma+mi)
		line(x+mi,y-mi,x-mi,y+mi)
	else
		x1=0-w
		y1=0-h
		x2=0-w
		y2=0+h
		--rectfill(x+x1,y+y1,x-x2,y+y2,WHITE)
		color(col)
		line(x-w,y-h,x-w,y+h)
		line(x+w,y-h,x+w,y+h)
		line(x+x1,y+y1,x-x1,y+y1)
		line(x+x2,y+y2,x-x2,y+y2)
		line(x+x1,y,x-x1,y)
		line(x+x2,y,x-x2,y)
	end
end

function bam(x,y,w,h,num)
	if num>0 and num<10 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
	end
	if num==1 then
		bam_o(x+w/2,y+h/2,w/2.5,h/2)
	elseif num==2 then
		bam_c(x+w/2,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/2,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==3 then
		bam_c(x+w/2     ,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4+w/16,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3   ,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==4 then
		bam_c(x+w/4+w/16,y+h/4  ,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3   ,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4+w/16,y+h/4*3,w/15,h/6,0,BLUE)
		bam_c(x+w/4*3   ,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==5 then
		bam_c(x+w/4  ,y+h/4  ,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4  ,y+h/4*3,w/15,h/6,0,BLUE)
		bam_c(x+w/4*3,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/2  ,y+h/2  ,w/15,h/6,0,RED)
	elseif num==6 then
		bam_c(x+w/5+w/15    ,y+h/4   ,w/15,h/6,0,BLUE)
		bam_c(x+w/5*2.5+w/20,y+h/4   ,w/15,h/6,0,BLUE)
		bam_c(x+w/5*4       ,y+h/4   ,w/15,h/6,0,BLUE)
		bam_c(x+w/5+w/15    ,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/5*4       ,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==7 then
		bam_c(x+w/5*2.5+w/20,y+h/6  ,w/15,h/8,0,RED)
		bam_c(x+w/5+w/15    ,y+h/6*3,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*3,w/15,h/8,0,BLUE)
		bam_c(x+w/5*4       ,y+h/6*3,w/15,h/8,0,GREEN)
		bam_c(x+w/5+w/15    ,y+h/6*5,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*5,w/15,h/8,0,BLUE)
		bam_c(x+w/5*4       ,y+h/6*5,w/15,h/8,0,GREEN)
	elseif num==8 then
		bam_c(x+w/4+w/12  ,y+h/4+h/28  ,w/15,h/6,1,BLUE)
		bam_c(x+w/4*3-w/12,y+h/4+h/28  ,w/15,h/6,2,BLUE)
		bam_c(x+w/4+w/12  ,y+h/4*3-h/28,w/15,h/6,2,GREEN)
		bam_c(x+w/4*3-w/12,y+h/4*3-h/28,w/15,h/6,1,GREEN)
		bam_c(x+w/4       ,y+h/4+h/28  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4*3+w/16,y+h/4+h/28  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4       ,y+h/4*3-h/28,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3+w/16,y+h/4*3-h/28,w/15,h/6,0,GREEN)
	elseif num==9 then
		bam_c(x+w/5+w/15    ,y+h/6,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6,w/15,h/8,0,RED)
		bam_c(x+w/5*4       ,y+h/6,w/15,h/8,0,BLUE)
		bam_c(x+w/5+w/15    ,y+h/6*3,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*3,w/15,h/8,0,RED)
		bam_c(x+w/5*4       ,y+h/6*3,w/15,h/8,0,BLUE)
		bam_c(x+w/5+w/15    ,y+h/6*5,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*5,w/15,h/8,0,RED)
		bam_c(x+w/5*4       ,y+h/6*5,w/15,h/8,0,BLUE)
	end
end

------- MAN -------

function man_b(x,y,w,h)
	color(RED)
	--character
	--rect(x-w,y-h,x+w,y+h)
	y=y-h/2
	h=h/1
	line(x-w/1.5,y-h/2,x-1,y-h/2)
	line(x+w/1.5+1,y-h/2,x+1,y-h/2)
	line(x-w/3,y-h/1.8,x-w/3,y-h/3)
	line(x+w/3+1,y-h/1.8,x+w/3+1,y-h/3)
	line(x,y-h/6,x,y+h/4*4)
	line(x-w/1.8,y+h/4*3.5,x+w/1.8+1,y+h/4*3.5)
	line(x-w/1.8,y+h/4*3.5,x-w/1.8,y+h/4*5.5)
	line(x+w/1.8+1,y+h/4*3.5,x+w/1.8+1,y+h/4*5.5)
	line(x+w/1.8-1,y+h/4*5.5,x+w/1.8+1,y+h/4*5.5)
	line(x-w/3,y+h/4*5.5,x+w/3,y+h/4*4)
	line(x+w/2,y+h/4*5.5,x+w/3,y+h/4*4)
	rect(x-w/2,y-h/6,x+w/2,y+h/4)
	rect(x-w/2,y+h/4,x+w/2,y+h/4*2)
end


function man(x,y,w,h,num)
	if num>0 and num<10 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
		man_b(x+w/2,y+h/4*3,w/2,h/4)
		color(BLUE)
	end
	x=x+w/2
	y=y+h/4
	w=w/2
	h=h/4
	if num==1 then
		line(x-w/2,y,x+w/2,y)
		line(x-w/2,y+1,x+w/2,y-1)
	elseif num==2 then
		line(x-w/2,y+h/3,x+w/2,y+h/3)
		line(x-w/2,y+1+h/3,x+w/2,y-1+h/3)
		line(x-w/3,y-h/3,x+w/3,y-h/3)
		line(x-w/3,y+1-h/3,x+w/3,y-1-h/3)
	elseif num==3 then
		line(x-w/2,y+h/2,x+w/2,y+h/2)
		line(x-w/2,y+1+h/2,x+w/2,y-1+h/2)
		line(x-w/3,y,x+w/3,y)
		line(x-w/3,y+1,x+w/3,y-1)
		line(x-w/4,y-h/2,x+w/3,y-h/2)
		line(x-w/4,y+1-h/2,x+w/3,y-1-h/2)
	elseif num==4 then
		rect(x-w/2,y-h/3,x+w/2,y+h/3)
		line(x-w/5,y-h/3,x-w/8,y+h/3)
		line(x+w/4,y-h/3,x+w/5,y+h/3)
		line(x,y+h/3,x+w/2,y+h/3+1)
		pset(x-w/2-1,y-h/3)
	elseif num==5 then
		line(x-w/2,y,x-w/8,y-h/2)
		line(x-w/2,y,x-w/5,y-h/2)
		line(x+w/3,y-h/2,x,y+h/3)
		line(x+w/3,y-h/2,x+w/8,y-h/2)
		line(x-w/3,y+h/3,x+w/2,y+h/3)
		line(x-w/3,y+h/2,x-w/3,y)
		line(x-w/8,y,x+w/2.5,y)
		line(x+w/2.5,y,x+w/5,y+h/3)
	elseif num==6 then
		line(x,y-h/2,x,y-h/4)
		line(x-w/2,y-h/8,x+w/2,y-h/4)
		line(x+w/4,y+h/8,x+w/2,y+h/4)
		line(x-w/4,y+h/4,x-w/2,y+h/3)
	elseif num==7 then
		line(x-w/8,y-h/2,x-w/8,y+h/3)
		line(x-w/1.8,y+h/5,x,y-h/8)
		line(x,y-h/8,x+w/2,y-h/8)
		line(x+w/2.5,y+h/2,x-w/8,y+h/3)
	elseif num==8 then
		line(x-w/10,y-h/2,x+w/8,y+h/8)
		line(x+w/1.5,y+h/2,x+w/8,y+h/8)
		line(x-w/1.7,y+h/3,x-w/3,y-h/8)
	elseif num==9 then
		line(x-w/2,y-h/8,x+w/4,y-h/8)
		line(x+w/4,y-h/8,x,y+h/2)
		line(x+w/2,y+h/2.5,x,y+h/2)
		line(x-w/1.7,y+h/2,x,y-h/2)
	end
end

------- HONORS -------
-- 1-4 winds
-- 5-7 dragons


function hon(x,y,w,h,num)
	if num>0 and num<8 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
	end
	if num<5 then
		y=y+1
	end
	x=x+w/2
	y=y+h/2
	h=h/1.2
	w=w/1.2
	if num==1 then 			-- East
		color(BLUE)
		line(x,y-h/2.5,x,y+h/3)
		line(x-w/8,y+h/4,x,y+h/3)
		line(x,y-h/20,x+w/3,y+h/5)
		line(x,y-h/20,x-w/3,y+h/5)
		rect(x-w/3,y-h/4,x+w/3+1,y-h/20)
		line(x-w/8,y-h/8,x+w/8+1,y-h/8)
		line(x-w/8,y-h/3,x+w/8+1,y-h/3)
	elseif num==2 then 		-- North
		color(BLUE)
		line(x,y-h/3,x-1,y-h/14)
		line(x-w/8,y+h/4,x+w/8+1,y+h/5)
		line(x,y+h/20,x+w/5,y-h/10)
		line(x,y+h/20,x-w/5,y-h/10)
		line(x,y+h/20,x,y+h/3)
		line(x-w/8,y+h/8,x+w/8+1,y+h/8)
		line(x-w/8,y-h/5,x+w/8+1,y-h/4)
		line(x-w/3,y,x+w/3+1,y-h/20)
		line(x-w/3,y,x-w/3,y+h/4)
		line(x+w/3+1,y-h/20,x+w/3+1,y+h/3)
		line(x+w/3-1,y+h/3,x+w/3+1,y+h/3)
	elseif num==3 then 		-- West
		color(BLUE)
		line(x-w/6,y-h/4,x+w/6+1,y-h/3.5)
		rect(x-w/3,y,x+w/3+1,y+h/3)
		line(x-w/8,y-h/10,x-w/8,y+h/5)
		line(x+w/8,y-h/10,x+w/8,y+h/6)
		line(x+w/8,y+h/6,x+w/4,y+h/6)
	elseif num==4 then 		-- South
		color(BLUE)
		h=h*1.3
		line(x-w/12,y-h/8,x-w/12,y+h/4)
		line(x+w/4,y-h/4,x+w/4,y+h/4)
		line(x+w/2,y+h/4,x+w/4,y+h/4)
		line(x+w/4,y+h/6,x+w/2,y)
		line(x-w/3,y-h/8,x-w/3,y)
		line(x-w/2.5,y+h/4,x+w/4,y-h/8)
	elseif num==5 then		-- White dragon
	elseif num==6 then 		-- Green dragon
		color(GREEN)
		w=w*1.1
		x=x-1
		line(x-w/3+1,y,x-w/10+1,y-h/3)
		line(x+w/2,y,x+w/10,y-h/3)
		line(x-w/10+1,y-h/3,x-w/4+1,y-h/3)
		line(x+w/10,y-h/3,x+w/4,y-h/2.5)
		line(x+w/12,y-h/8,x+w/2.5,y-h/3)
		line(x-w/5+1,y-h/8,x-w/3+1,y-h/4)
		line(x-w/10,y-h/20,x,y-h/20)
		line(x-w/10,y+h/4,x,y-h/20)
		line(x-w/10,y+h/4,x,y+h/5)
		line(x-w/20,y+h/2.5,x,y+h/5)
		line(x-w/20,y+h/2.5,x-w/4,y+h/3)
		line(x-w/4,y+h/4,x+w/3,y+h/5)
		line(x+w/8,y+h/2.5,x+w/3,y+h/5)
		line(x+w/8,y+h/3,x+w/3,y+h/2.5)
		line(x+w/6,y,x+w/6,y+h/10)
		line(x+w/6*2,y,x+w/6*2,y+h/10)
		line(x+w/6*2,y,x+w/6,y)
	elseif num==7 then 		-- Red dragon
		color(RED)
		line(x-w/3,y-h/4,x+w/3+1,y-h/4)
		line(x-w/4,y,x-w/3,y-h/4)
		line(x+w/4,y,x+w/3+1,y-h/4)
		line(x-w/4,y-1,x+w/4,y-1)
		line(x,y-h/2,x,y+h/2.5)
	end
end
:: eval.lua
--[[pod_format="raw",created="2024-07-23 04:18:20",modified="2024-07-24 19:54:56",revision=389]]
SEAT={1,0,0,0}
	-- E N W S

function sum(table)
	local s=0
	for i=1,#table do
		s=s+table[i]
	end
	return s
end

function evaluate(hand)
	local h,t={},{}
	local p=0
	local nums={0,0,0,0,0,0,0,0,0}
	local honors={0,0,0,0,0,0,0}
	local pins={0,0,0,0,0,0,0,0,0}	
	local bams={0,0,0,0,0,0,0,0,0}	
	local mans={0,0,0,0,0,0,0,0,0}
	local ps={0,0,0,0,0,0,0,0,0}
	local bs={0,0,0,0,0,0,0,0,0}
	local ms={0,0,0,0,0,0,0,0,0}
	local winds={0,0,0,0}
	local dragons={0,0,0}
	local terminals=0
	local sequences={}
	local conceal=0
	local suit=0
	local triplets=0
	local kongs=0
	local pair=0
	
	for i=1,#hand do
		t=hand[i]--    type  number
		table.insert(h,{t[1],t[2]})
	end
	
	for i=1,#h do
		t=h[i]
		if t[1]<4 then 
			nums[t[2]]=nums[t[2]]+1
		end
		if t[1]==PIN then
			pins[t[2]]=pins[t[2]]+1
		end
		if t[1]==BAM then
			bams[t[2]]=bams[t[2]]+1
		end
		if t[1]==MAN then
			mans[t[2]]=mans[t[2]]+1
		end
		if t[1]==WIN then
			winds[t[2]]=winds[t[2]]+1
		end
		if t[1]==DRA then
			dragons[t[2]]=dragons[t[2]]+1
		end
		if t[2]==1 or t[2]==9 and t[1]<4 then
			terminals=terminals+1
		end
	end
	for i=1,9 do
		if pins[i]==4 then kongs=kongs+1 end
		if mans[i]==4 then kongs=kongs+1 end
		if bams[i]==4 then kongs=kongs+1 end
		if winds[i]==4 and i<5 then kongs=kongs+1 end
		if dragons[i]==4 and i<4 then kongs=kongs+1 end
	end
	for i=1,9 do
		if pins[i]==3 then triplets=triplets+1 end
		if mans[i]==3 then triplets=triplets+1 end
		if bams[i]==3 then triplets=triplets+1 end
		if winds[i]==3 and i<5 then 
			triplets=triplets+1 
			honors[i]=honors[i]+SEAT[i]
		end
		if dragons[i]==3 and i<4 then 
			triplets=triplets+1 
			honors[i+4]=honors[i+4]+1
		end
	end
	for i=1,9 do
		if pins[i]==2 then pair=pair+1 end
		if mans[i]==2 then pair=pair+1 end
		if bams[i]==2 then pair=pair+1 end
		if winds[i]==2 and i<5 then pair=pair+1 end
		if dragons[i]==2 and i<4 then pair=pair+1 end
		if i>1 and i<9 then
			if pins[i]>0 and pins[i-1]>0 and pins[i+1]>0 then
				if ps[i]==0 and ps[i-1]==0 and ps[i+1]==0 then
					table.insert(sequences,{PIN,i-1})
					table.insert(sequences,{PIN,i})
					table.insert(sequences,{PIN,i+1})
					ps[i]=1
				end
			end
			if mans[i]>0 and mans[i-1]>0 and mans[i+1]>0 then
				if ms[i]==0 and ms[i-1]==0 and ms[i+1]==0 then
					table.insert(sequences,{MAN,i-1})
					table.insert(sequences,{MAN,i})
					table.insert(sequences,{MAN,i+1})
					ms[i]=1
				end
			end
			if bams[i]>0 and bams[i-1]>0 and bams[i+1]>0 then
				if bs[i]==0 and bs[i-1]==0 and bs[i+1]==0 then
					table.insert(sequences,{BAM,i-1})
					table.insert(sequences,{BAM,i})
					table.insert(sequences,{BAM,i+1})
					bs[i]=1
				end
			end
		end
	end
	if sum(pins)==0 and sum(mans)==0 and sum(bams)>0 then suit=1 end
	if sum(pins)>0 and sum(mans)==0 and sum(bams)==0 then suit=1 end
	if sum(pins)==0 and sum(mans)>0 and sum(bams)==0 then suit=1 end
	if suit==1 and sum(winds)+sum(dragons)==0 then suit=2 end
	
-- No Terminals 5p
	if terminals==0 then p=p+5 end
-- Mixed one-suit 40p
	if suit==1 then p=p+40 end
-- Pure one-suit 80p
	if suit==2 then p=p+80 end
-- Nine Gates 480p
	if suit==2 and nums[1]==3 and nums[9]==3 and nums[2]>0 and nums[3]>0 and nums[4]>0 and nums[5]>0 and nums[6]>0 and nums[7]>0 and nums[8]>0 then
		p=480
	end
-- Value Honors 10p per set
	if sum(honors)>0 then p=p+10*sum(honors) end
-- Small Three Dragons
	if dragons[1]==3 and dragons[2]==3 and dragons[3]==2 then p=p+40 end
	if dragons[1]==2 and dragons[2]==3 and dragons[3]==3 then p=p+40 end
	if dragons[1]==3 and dragons[2]==2 and dragons[3]==2 then p=p+40 end
	if dragons[1]==3 and dragons[2]==2 and dragons[3]==3 then p=p+130 end
-- Small & Big Three Winds 
	if winds[1]==3 and winds[2]==3 and winds[3]==2 then p=p+30 end
	if winds[1]==3 and winds[2]==2 and winds[3]==3 then p=p+30 end
	if winds[1]==2 and winds[2]==3 and winds[3]==3 then p=p+30 end
	if winds[1]==3 and winds[2]==3 and winds[3]==3 then p=p+120 end
	
	if winds[1]==3 and winds[2]==3 and winds[4]==2 then p=p+30 end
	if winds[1]==3 and winds[2]==2 and winds[4]==3 then p=p+30 end
	if winds[1]==2 and winds[2]==3 and winds[4]==3 then p=p+30 end
	if winds[1]==3 and winds[2]==3 and winds[4]==3 then p=p+120 end
	
	if winds[1]==3 and winds[4]==3 and winds[3]==2 then p=p+30 end
	if winds[1]==3 and winds[4]==2 and winds[3]==3 then p=p+30 end
	if winds[1]==2 and winds[4]==3 and winds[3]==3 then p=p+30 end
	if winds[1]==3 and winds[4]==3 and winds[3]==3 then p=p+120 end
	
	if winds[4]==3 and winds[2]==3 and winds[3]==2 then p=p+30 end
	if winds[4]==3 and winds[2]==2 and winds[3]==3 then p=p+30 end
	if winds[4]==2 and winds[2]==3 and winds[3]==3 then p=p+30 end
	if winds[4]==3 and winds[2]==3 and winds[3]==3 then p=p+120 end
	
	if winds[1]==3 and winds[2]==3 and winds[3]==3 and winds[4]==2 then p=p+320 end
	if winds[1]==3 and winds[2]==3 and winds[3]==2 and winds[4]==3 then p=p+320 end
	if winds[1]==3 and winds[2]==2 and winds[3]==3 and winds[4]==3 then p=p+320 end
	if winds[1]==2 and winds[2]==3 and winds[3]==3 and winds[4]==3 then p=p+320 end
	if winds[1]==3 and winds[2]==3 and winds[3]==3 and winds[4]==3 then p=p+400 end
-- All Triplets 30p	
	if triplets==4 then p=p+30 end
-- Kongs - one 5p, two 20p, three 120p, four 480p
	if kongs==1 then p=p+5 end
	if kongs==2 then p=p+20 end
	if kongs==3 then p=p+120 end
	if kongs==4 then p=p+480 end
-- All Honors 320p
	if sum(nums)==0 and sum(honors)==14 then p=p+320 end
-- Seven pairs
	if pair==7 and kongs==0 then p=p+30 end
	--			1   2    3    4   5         6         7       8     9    10   11    12    13    
	return {pins,bams,mans,p,terminals,sequences,triplets,conceal,suit,pair,kongs,winds,dragons}
end

--[[
All Sequences        :   5 
Concealed Hand       :   5 
No Terminals         :   5 			--

Mixed One-Suit       :  40 			--
Pure One-Suit        :  80 			--
Nine Gates           : 480 			--

Value Honor          :  10 per set 	--
Small Three Dragons  :  40			--
Big Three Dragons    : 130			--
Small Three Winds    :  30			--
Big Three Winds      : 120			--
Small Four Winds     : 320			--
Big Four Winds       : 400			--
All Honors           : 320			--

All Triplets         :  30				--
Two Concealed Triplets        :   5
Three Concealed Triplets      :  30
Four Concealed Triplets       : 125
One Kong             :   5			--
Two Kong             :  20			--
Three Kong           : 120			--
Four Kong            : 480			--

Two Identical Sequences       :  10
Two Identical Sequences Twice :  60
Three Identical Sequences     : 120
Four Identical Sequences      : 480

Three Similar Sequences       :  35
Small Three Similar Triplets  :  30
Three Similar Triplets        : 120

Nine-Tile Straight            :  40
Three Consecutive Triplets    : 100
Four Consecutive Triplets     : 200

Mixed Lesser Terminals        :  40
Pure Lesser Terminals         :  50
Mixed Greater Terminals       : 100
Pure Greater Terminals        : 400

Final Draw           :  10
Final Discard        :  10
Win on Kong          :  10
Robbing a Kong       :  10
Blessing of Heaven   : 155
Blessing of Earth    : 155

Thirteen Terminals   : 160
Seven Pairs          :  30
]]--
:: main.lua
--[[pod_format="raw",created="2024-07-22 20:50:59",modified="2024-07-24 19:54:56",revision=3986]]
include("tiles.lua")
include("players.lua")
include("eval.lua")
include("util.lua")
include("board.lua")

W=480
H=270

SELECT=10
SPEED=4

m={}

t={}
r=0
til={}
hand1={}
hand2={}
hand3={}
hand4={}
open1={}
open2={}
open3={}
open4={}
wall={}
pond1={}
pond2={}
pond3={}
pond4={}
turn=0
pon=false
chi=false
kan=false
ron=false
temp_tile={}

local function shuffle(t)
    local s = {}
    for i = 1, #t do s[i] = t[i] end
    for i = #t, 2, -1 do
        local j = math.random(i)
        s[i], s[j] = s[j], s[i]
    end
    return s
end

function _init()
	w=16
	h=w*1.5
	for i=1,5 do
		for ii=1,9 do
			it=tile(i,ii,ii*(w+4),(i)*(h+8),w,h,ORANGE,-4)
			if it[1]>0 then 
				table.insert(t,it)
				table.insert(t,it)
				table.insert(t,it)
				table.insert(t,it)
			end
		end
	end	
	t=shuffle(t)
	for i=1,13 do
		table.insert(hand1,t[i])
		table.insert(hand2,t[i+13])
		table.insert(hand3,t[i+26])
		table.insert(hand4,t[i+39])
	end
	for i=1,13*4 do 
		table.remove(t,1)
	end
	for i=1,84 do 
		table.insert(wall,1,t[1])
		table.remove(t,1)
	end
	table.insert(hand1,wall[1])
	table.remove(wall,1)
end	
sel=13
wait=0
wsel=sel
move=0
last=0
function _update()
	cls(19)
	wait=max(0,wait-1)
	draw_other_hands()
	
	m=update_mouse()
	if wsel!=sel then 
		sfx(move,-1,rnd(8)//1,1) 
		wsel=sel
	end
	if btnp(2) then move=1 end
	if btnp(3) then move=0 end
	if btnp(0) then 
		if move==1 then
			if sel==0 then 
				hand1[sel+1],hand1[14]=hand1[14],hand1[sel+1]
			else
				hand1[sel+1],hand1[sel]=hand1[sel],hand1[sel+1]
			end
		end
		sel=sel-1 
	end
	if btnp(1) then
		if move==1 then
			if sel==13 then	
				hand1[1],hand1[sel+1]=hand1[sel+1],hand1[1]
			else
				hand1[sel+2],hand1[sel+1]=hand1[sel+1],hand1[sel+2]
			end
		end
		sel=sel+1 
	end
	sel=sel%#hand1
	if turn%4!=0 then 
		score=evaluate({hand1[1],hand1[2],hand1[3],hand1[4],hand1[5],hand1[6],hand1[7],hand1[8],hand1[9],hand1[10],hand1[11],hand1[12],hand1[13]})
	else
		score=evaluate(hand1)
	end
	pins=score[1]
	bams=score[2]
	mans=score[3]
	dras=score[13]
	wins=score[12]
	draw_ponds()
	draw_opens()
	draw_hand(sel+1,move)
	if (chi and not pon) and btnp(4) then 
		table.insert(wall,hand1[14])
		table.remove(hand1,14)
		table.insert(open1,pond4[#pond4])
		table.remove(pond4,#pond4)
		turn=turn+1
	end
	if (pon and not chi) and btnp(4) then 
		table.insert(wall,hand1[14])
		table.remove(hand1,14)
		if last==1 then 
			ty=pond2[#pond2][1]
			nu=pond2[#pond2][2]
			pond2[#pond2][9]=1
			table.insert(open1,pond2[#pond2])
			table.remove(pond2,#pond2)
		end
		if last==2 then 
			ty=pond3[#pond3][1]
			nu=pond3[#pond3][2]
			pond3[#pond3][9]=1
			table.insert(open1,pond3[#pond3])
			table.remove(pond3,#pond3)
		end
		if last==3 then 
			ty=pond4[#pond4][1]
			nu=pond4[#pond4][2]
			pond4[#pond4][9]=1
			table.insert(open1,pond4[#pond4])
			table.remove(pond4,#pond4)
		end
		for i=1,#hand1 do
			temp_tile=hand1[i]
			if temp_tile!=nil then 
				if temp_tile[1]==ty and temp_tile[2]==nu then
					hand1[i][9]=0
					table.insert(open1,hand1[i])
					table.remove(hand1,i)
				end	
			end
		end
		turn=turn+1
	end
	if (chi or pon) and btnp(5) then
		turn=turn+1
		wait=0
	end
	if (btnp(4) or turn%4!=0) and (not chi and not pon) and wait==0 then 
		sfx(2,-1,rnd(8)//1,1) 
		if turn%4==0 then 
			table.insert(pond1,hand1[sel+1])
			table.remove(hand1,sel+1)
			-- the whole round???
			--[[
			play_p2()
			play_p3()
			play_p4()
			--]]
			table.insert(hand1,wall[1])
			table.remove(wall,1)
			wait=SPEED
		end
		if turn%4==1 then
			play_p2()
			wait=SPEED
		end
		if turn%4==2 then
			play_p3()
			wait=SPEED
		end
		if turn%4==3 then
			play_p4()
			wait=SPEED
		end
		last=turn%4
		if last==1 then
			d_type=pond2[#pond2][1]
			d_num=pond2[#pond2][2]
		elseif last==2 then
			d_type=pond3[#pond3][1]
			d_num=pond3[#pond3][2]
		elseif last==3 then
			d_type=pond4[#pond4][1]
			d_num=pond4[#pond4][2]
		end
		if last>0 then
			pon=check_pon(d_type,d_num,pins,mans,bams,wins,dras)
		end
		if last==3 then
			chi=check_chi(d_type,d_num,pins,mans,bams,wins,dras)
		end
		if not chi and not pon then 
			turn=(turn+1)
		end
	end
	if (chi and not pon) then print("CHI?",W/2,H/2,7) end
	if (pon and not chi) then print("PON?",W/2,H/2-8,7) end
	
	if (chi or pon) and turn%4==0 then 
		chi=false
		pon=false
		wait=0
	end
	debug_score(score)
	--line(0,0,W,H,7)
	--line(W,0,0,H,7)
	--debug_tiles(16,16,20+sin(time()*0.2)*8)
end


function check_pon(t,n,p,m,b,w,d)
	if t==PIN then
		if p[n]>1 then
			return true
		end
	end
	if t==MAN then
		if m[n]>1 then
			return true
		end
	end
	if t==BAM then
		if b[n]>1 then
			return true
		end
	end
	if t==WIN then
		if w[n]>1 then
			return true
		end
	end
	if t==DRA then
		if d[n]>1 then
			return true
		end
	end
	return false
end

function check_chi(t,n,p,m,b,w,d)
	if t==PIN then
		return chic(n,p)
	end
	if t==MAN then
		return chic(n,m)
	end
	if t==BAM then
		return chic(n,b)
	end
	return false
end

function chic(n,p)
	if n>2 then 
		if p[n-1]>0 and p[n-2]>0 then
			return true
		end
	end
	if n<8 then
		if p[n+1]>0 and p[n+2]>0 then
			return true
		end
	end
	if n>1 and n<9 then
		if p[n-1]>0 and p[n+1]>0 then
			return true
		end
	end
	return false
end




function debug_tiles(x,y,s)
	s=max(s,10)
	local w,h=s,s*1.5
	for i=1,5 do
		for ii=1,9 do
			tile(i,ii,x+(w+2)*(ii-1),y+(h+8)*(i-1),w,h,ORANGE,1)
		end
	end
end

function debug_score(score)
	pins=score[1]
	bams=score[2]
	mans=score[3]
	local seqs=""
	for i=1,#score[6] do
		local se=""
		if score[6][i][1]==PIN then
			se="P"
		elseif score[6][i][1]==MAN then
			se="M"
		elseif score[6][i][1]==BAM then
			se="B"
		end
		seqs=seqs..se..score[6][i][2].." "
	end
	print("p "..score[4],1,0,7)
	print("t "..score[5],1,10,7)
	print("s "..#score[6].." "..seqs,1,20,7)
	print("     1 2 3 4 5 6 7 8 9",1,H-60,6)
	scorn="pin:"
	for i=1,9 do
		scorn=scorn.." "..pins[i]
	end
	print(scorn,1,H-30,7)
	scorn="bam:"
	for i=1,9 do
		scorn=scorn.." "..bams[i]
	end
	print(scorn,1,H-40,7)
	scorn="man:"
	for i=1,9 do
		scorn=scorn.." "..mans[i]
	end
	print(scorn,1,H-50,7)
	scorn="wind:"
	for i=1,4 do
		scorn=scorn.." "..score[12][i]
	end
	print(scorn,1,H-20,7)
	scorn="drag:"
	for i=1,3 do
		scorn=scorn.." "..score[13][i]
	end
	print(scorn,1,H-10,7)
	print("k "..score[11],1,30,7)
	print("w "..sum(score[12]),1,40,7)
	print("d "..sum(score[13]),1,50,7)
	print("tr "..score[7],1,60,7)
	print("su "..score[9],1,70,7)
	print("pa "..score[10],1,80,7)
	
	print("turn "..turn,W-48,0,7)
end
:: players.lua
--[[pod_format="raw",created="2024-07-23 03:58:46",modified="2024-07-24 19:54:56",revision=365]]
function play_p2()
	placeholder_player(hand2,pond2)
end
function play_p3()
	placeholder_player(hand3,pond3)
end
function play_p4()
	placeholder_player(hand4,pond4)
end
function placeholder_player(hand,pond)	
	table.insert(pond,hand[1])
	table.remove(hand,1)
	table.insert(hand,wall[1])
	table.remove(wall,1)
end
:: tiles.lua
--[[pod_format="raw",created="2024-07-23 01:05:22",modified="2024-07-24 19:54:56",revision=1428]]
GREEN=3
RED=24
BLUE=16
WHITE=7
ORANGE=9
GRAY=15
RADIUS=3
PIN=1
BAM=2
MAN=3
WIN=4
DRA=5


function tile(type,num,x,y,w,h,col,show)
	--base
	if type>MAN then
		if type==WIN and num>4 then
			return {-1,-1,x,y,w,h,col,-1,0,0}
		elseif type==DRA and num>3 then
			return {-1,-1,x,y,w,h,col,-1,0,0}
		end
	end
	if show>0 then
		if m[1]>=x and m[1]<=x+w and m[2]>=y-4 and m[2]<=y+h then
			x=x-w/2
			y=y-h/2
			w=w*2
			h=h*2
			if show>2 then show=2 end
		end
		if show==1 then 
			pill(x,y-h/8*2,w,h,RADIUS,col)
			pill(x,y-h/8,w,h,RADIUS,WHITE)
			pill(x,y,w,h,RADIUS,GRAY)
		elseif show==2 then
			y=y-h/8*2
			pill(x,y+h/8*2,w,h,RADIUS,col)
			pill(x,y+h/8,w,h,RADIUS,GRAY)
			pill(x,y,w,h,RADIUS,WHITE)
		elseif show==3 then
			y=y-h/8*2
			pill(x,y+h/8*2,h,w,RADIUS,col)
			pill(x,y+h/8,h,w,RADIUS,GRAY)
			pill(x,y,h,w,RADIUS,WHITE)
		end
		if type==PIN then 
			pin(x,y,w,h,num)
		elseif type==BAM then 
			bam(x,y,w,h,num)
		elseif type==MAN then 
			man(x,y,w,h,num)
		elseif type==WIN then
			hon(x,y,w,h,num)
		elseif type==DRA then
			hon(x,y,w,h,num+4)
		end
	else
		if show==0 then
			pill(x,y,w,h,RADIUS,GRAY)
			pill(x,y-h/8,w,h,RADIUS,GRAY)
			pill(x,y-h/8*2,w,h,RADIUS,col)
		elseif show==-1 then
			pill(x,y-h/8*2,w,h,RADIUS,GRAY)
			pill(x,y-h/8,w,h,RADIUS,col)
			pill(x,y,w,h,RADIUS,col)
		elseif show==-2 then
			pill(x,y-h/8*2,h,w,RADIUS,GRAY)
			pill(x,y-h/8,h,w,RADIUS,col)
			pill(x,y,h,w,RADIUS,col)
		elseif show==-3 then	
			pill(x,y,h,w,RADIUS,GRAY)
			pill(x,y-h/8,h,w,RADIUS,col)
			pill(x,y-h/8*2,h,w,RADIUS,col)
		elseif show==-4 then	
			pill(x,y,w,h,RADIUS,GRAY)
			pill(x,y,w/2,h,RADIUS,col)
			pill(x+w/8,y,w/2,h,RADIUS,col)
		elseif show==-5 then	
			pill(x,y,w,h,RADIUS,GRAY)
			pill(x+w/2,y,w/2,h,RADIUS,col)
			pill(x+w/2-w/8,y,w/2,h,RADIUS,col)
		
		end
	end
	return {type,num,x,y,w,col,show,0,0}
end

------ BASE -------
function pill(x,y,w,h,d,col)
	local r=d
	color(col)
	if r>0 then 
		rectfill(x+r,y,x+w-r,y+h)
		rectfill(x,y+r,x+w,y+h-r)
		circfill(x+r,y+r,r)
		circfill(x+w-r,y+r,r)
		circfill(x+r,y+h-r,r)
		circfill(x+w-r,y+h-r,r)
	else
		rectfill(x,y,x+w,y+h)
	end
end

------- PINS -------
function pin_o(x,y,s,col)
	circfill(x,y,s,col)
	circfill(x,y,s*0.8,RED)
	circfill(x,y,s*0.4,WHITE)
end
function pin_c(x,y,s,col)
	circfill(x,y,s,col)
end

function pin(x,y,w,h,num)
	if num>0 and num<10 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
	end
	if num==1 then
		pin_o(x+w/2,y+h/2,w/2.2,GREEN)
	elseif num==2 then 
		pin_c(x+w/2,y+h/3-h/24,w/4,BLUE)
		pin_c(x+w/2,y+h/3*2+h/24,w/4,GREEN)
	elseif num==3 then 
		pin_c(x+w/4,y+h/4,w/5,BLUE)
		pin_c(x+w/2,y+h/2,w/5,RED)
		pin_c(x+w/4*3,y+h/4*3,w/5,GREEN)
	elseif num==4 then 
		pin_c(x+w/4,y+h/4,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4*3,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4,w/5,BLUE)
		pin_c(x+w/4,y+h/4*3,w/5,BLUE)
	elseif num==5 then 
		pin_c(x+w/4,y+h/4,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4*3,w/5,GREEN)
		pin_c(x+w/4*3,y+h/4,w/5,BLUE)
		pin_c(x+w/4,y+h/4*3,w/5,BLUE)
		pin_c(x+w/2,y+h/2,w/5,RED)
	elseif num==6 then
		pin_c(x+w/4+w/16,y+h/6*3+h/24,w/6,RED)
		pin_c(x+w/4+w/16,y+h/6*5-h/24,w/6,RED)
		pin_c(x+w/4*3-w/16,y+h/6*3+h/24,w/6,RED)
		pin_c(x+w/4*3-w/16,y+h/6*5-h/24,w/6,RED)
		pin_c(x+w/4+w/16,y+h/6*2-h/12,w/6,GREEN)
		pin_c(x+w/4*3-w/16,y+h/6*2-h/12,w/6,GREEN)
	elseif num==7 then
		pin_c(x+w/4+w/16,y+h/6*3+h/24,w/7,RED)
		pin_c(x+w/4+w/16,y+h/6*5-h/24,w/7,RED)
		pin_c(x+w/4*3-w/16,y+h/6*3+h/24,w/7,RED)
		pin_c(x+w/4*3-w/16,y+h/6*5-h/24,w/7,RED)
		pin_c(x+w/4-w/16,y+h/6*1+h/24,w/7,GREEN)
		pin_c(x+w/2,y+h/6*2-h/12,w/7,GREEN)
		pin_c(x+w/4*3+w/16,y+h/6*2-h/24,w/7,GREEN)
	elseif num==8 then
		pin_c(x+w/3,y+h/9*2,w/8,BLUE)
		pin_c(x+w/3,y+h/9*4,w/8,BLUE)
		pin_c(x+w/3,y+h/9*6-h/24,w/8,BLUE)
		pin_c(x+w/3,y+h/9*8-h/24,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*2,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*4,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*6-h/24,w/8,BLUE)
		pin_c(x+w/3*2+w/16,y+h/9*8-h/24,w/8,BLUE)
	elseif num==9 then
		pin_c(x+w/6+w/16,y+h/6*1.5,w/6,BLUE)
		pin_c(x+w/6*3,y+h/6*1.5,w/6,BLUE)
		pin_c(x+w/6*5,y+h/6*1.5,w/6,BLUE)
		pin_c(x+w/6+w/16,y+h/6*3,w/6,RED)
		pin_c(x+w/6*3,y+h/6*3,w/6,RED)
		pin_c(x+w/6*5,y+h/6*3,w/6,RED)
		pin_c(x+w/6+w/16,y+h/6*4.5,w/6,GREEN)
		pin_c(x+w/6*3,y+h/6*4.5,w/6,GREEN)
		pin_c(x+w/6*5,y+h/6*4.5,w/6,GREEN)
	end
end

------- BAMBOO -------

function bam_o(x,y,w,h)
	local i=0
	--bird??
	line(x-w,y,x+w+1,y,GREEN)
	line(x-w,y+2,x+w+1,y+2,GREEN)
	pset(x-w,y+1,GREEN)
	pset(x+w+1,y+1,GREEN)
	for i=0,6,2 do
		line(x+w/20*i-w/4,y,x-w/8+w/8*i,y+h/1.5+h/20*(6-i),BLUE)
		line(x+w/12*i-w/3,y,x+w/6+w/12*i,y-h/3,GREEN)
		line(x+w/10*i,y-h/1.8,x+w/6+w/12*i,y-h/3,GREEN)
		line(x+w/10*i,y-h/1.8,x+w/4,y-h/1.1,RED)
		line(x,y-w/10*i,x-w/1.2,y-w/5*i,BLUE)
	end
	circfill(x+w/3,y-h/2,(w/h)*w/1.4,WHITE)
	circ(x+w/3,y-h/2,(w/h)*w/1.4,RED)
	pset(x+w/3,y-h/2,RED)
end

function bam_c(x,y,w,h,a,col)
	local ma,mi=max(w,h),min(w,h)
	ma=ma*0.8
	mi=mi*0.8
	color(col)
	if a==1 then
		line(x+ma-mi,y-ma-mi,x-ma-mi,y+ma-mi)
		line(x+ma+mi,y-ma+mi,x-ma+mi,y+ma+mi)
		line(x+ma-mi,y-ma-mi,x+ma+mi,y-ma+mi)
		line(x-ma-mi,y+ma-mi,x-ma+mi,y+ma+mi)
		line(x-mi,y-mi,x+mi,y+mi)
	elseif a==2 then
		line(x-ma+mi,y-ma-mi,x+ma+mi,y+ma-mi)
		line(x-ma-mi,y-ma+mi,x+ma-mi,y+ma+mi)
		line(x-ma+mi,y-ma-mi,x-ma-mi,y-ma+mi)
		line(x+ma+mi,y+ma-mi,x+ma-mi,y+ma+mi)
		line(x+mi,y-mi,x-mi,y+mi)
	else
		x1=0-w
		y1=0-h
		x2=0-w
		y2=0+h
		--rectfill(x+x1,y+y1,x-x2,y+y2,WHITE)
		color(col)
		line(x-w,y-h,x-w,y+h)
		line(x+w,y-h,x+w,y+h)
		line(x+x1,y+y1,x-x1,y+y1)
		line(x+x2,y+y2,x-x2,y+y2)
		line(x+x1,y,x-x1,y)
		line(x+x2,y,x-x2,y)
	end
end

function bam(x,y,w,h,num)
	if num>0 and num<10 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
	end
	if num==1 then
		bam_o(x+w/2,y+h/2,w/2.5,h/2)
	elseif num==2 then
		bam_c(x+w/2,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/2,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==3 then
		bam_c(x+w/2     ,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4+w/16,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3   ,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==4 then
		bam_c(x+w/4+w/16,y+h/4  ,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3   ,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4+w/16,y+h/4*3,w/15,h/6,0,BLUE)
		bam_c(x+w/4*3   ,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==5 then
		bam_c(x+w/4  ,y+h/4  ,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3,y+h/4  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4  ,y+h/4*3,w/15,h/6,0,BLUE)
		bam_c(x+w/4*3,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/2  ,y+h/2  ,w/15,h/6,0,RED)
	elseif num==6 then
		bam_c(x+w/5+w/15    ,y+h/4   ,w/15,h/6,0,BLUE)
		bam_c(x+w/5*2.5+w/20,y+h/4   ,w/15,h/6,0,BLUE)
		bam_c(x+w/5*4       ,y+h/4   ,w/15,h/6,0,BLUE)
		bam_c(x+w/5+w/15    ,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/4*3,w/15,h/6,0,GREEN)
		bam_c(x+w/5*4       ,y+h/4*3,w/15,h/6,0,GREEN)
	elseif num==7 then
		bam_c(x+w/5*2.5+w/20,y+h/6  ,w/15,h/8,0,RED)
		bam_c(x+w/5+w/15    ,y+h/6*3,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*3,w/15,h/8,0,BLUE)
		bam_c(x+w/5*4       ,y+h/6*3,w/15,h/8,0,GREEN)
		bam_c(x+w/5+w/15    ,y+h/6*5,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*5,w/15,h/8,0,BLUE)
		bam_c(x+w/5*4       ,y+h/6*5,w/15,h/8,0,GREEN)
	elseif num==8 then
		bam_c(x+w/4+w/12  ,y+h/4+h/28  ,w/15,h/6,1,BLUE)
		bam_c(x+w/4*3-w/12,y+h/4+h/28  ,w/15,h/6,2,BLUE)
		bam_c(x+w/4+w/12  ,y+h/4*3-h/28,w/15,h/6,2,GREEN)
		bam_c(x+w/4*3-w/12,y+h/4*3-h/28,w/15,h/6,1,GREEN)
		bam_c(x+w/4       ,y+h/4+h/28  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4*3+w/16,y+h/4+h/28  ,w/15,h/6,0,BLUE)
		bam_c(x+w/4       ,y+h/4*3-h/28,w/15,h/6,0,GREEN)
		bam_c(x+w/4*3+w/16,y+h/4*3-h/28,w/15,h/6,0,GREEN)
	elseif num==9 then
		bam_c(x+w/5+w/15    ,y+h/6,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6,w/15,h/8,0,RED)
		bam_c(x+w/5*4       ,y+h/6,w/15,h/8,0,BLUE)
		bam_c(x+w/5+w/15    ,y+h/6*3,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*3,w/15,h/8,0,RED)
		bam_c(x+w/5*4       ,y+h/6*3,w/15,h/8,0,BLUE)
		bam_c(x+w/5+w/15    ,y+h/6*5,w/15,h/8,0,GREEN)
		bam_c(x+w/5*2.5+w/20,y+h/6*5,w/15,h/8,0,RED)
		bam_c(x+w/5*4       ,y+h/6*5,w/15,h/8,0,BLUE)
	end
end

------- MAN -------

function man_b(x,y,w,h)
	color(RED)
	--character
	--rect(x-w,y-h,x+w,y+h)
	y=y-h/2
	h=h/1
	line(x-w/1.5,y-h/2,x-1,y-h/2)
	line(x+w/1.5+1,y-h/2,x+1,y-h/2)
	line(x-w/3,y-h/1.8,x-w/3,y-h/3)
	line(x+w/3+1,y-h/1.8,x+w/3+1,y-h/3)
	line(x,y-h/6,x,y+h/4*4)
	line(x-w/1.8,y+h/4*3.5,x+w/1.8+1,y+h/4*3.5)
	line(x-w/1.8,y+h/4*3.5,x-w/1.8,y+h/4*5.5)
	line(x+w/1.8+1,y+h/4*3.5,x+w/1.8+1,y+h/4*5.5)
	line(x+w/1.8-1,y+h/4*5.5,x+w/1.8+1,y+h/4*5.5)
	line(x-w/3,y+h/4*5.5,x+w/3,y+h/4*4)
	line(x+w/2,y+h/4*5.5,x+w/3,y+h/4*4)
	rect(x-w/2,y-h/6,x+w/2,y+h/4)
	rect(x-w/2,y+h/4,x+w/2,y+h/4*2)
end


function man(x,y,w,h,num)
	if num>0 and num<10 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
		man_b(x+w/2,y+h/4*3,w/2,h/4)
		color(BLUE)
	end
	x=x+w/2
	y=y+h/4
	w=w/2
	h=h/4
	if num==1 then
		line(x-w/2,y,x+w/2,y)
		line(x-w/2,y+1,x+w/2,y-1)
	elseif num==2 then
		line(x-w/2,y+h/3,x+w/2,y+h/3)
		line(x-w/2,y+1+h/3,x+w/2,y-1+h/3)
		line(x-w/3,y-h/3,x+w/3,y-h/3)
		line(x-w/3,y+1-h/3,x+w/3,y-1-h/3)
	elseif num==3 then
		line(x-w/2,y+h/2,x+w/2,y+h/2)
		line(x-w/2,y+1+h/2,x+w/2,y-1+h/2)
		line(x-w/3,y,x+w/3,y)
		line(x-w/3,y+1,x+w/3,y-1)
		line(x-w/4,y-h/2,x+w/3,y-h/2)
		line(x-w/4,y+1-h/2,x+w/3,y-1-h/2)
	elseif num==4 then
		rect(x-w/2,y-h/3,x+w/2,y+h/3)
		line(x-w/5,y-h/3,x-w/8,y+h/3)
		line(x+w/4,y-h/3,x+w/5,y+h/3)
		line(x,y+h/3,x+w/2,y+h/3+1)
		pset(x-w/2-1,y-h/3)
	elseif num==5 then
		line(x-w/2,y,x-w/8,y-h/2)
		line(x-w/2,y,x-w/5,y-h/2)
		line(x+w/3,y-h/2,x,y+h/3)
		line(x+w/3,y-h/2,x+w/8,y-h/2)
		line(x-w/3,y+h/3,x+w/2,y+h/3)
		line(x-w/3,y+h/2,x-w/3,y)
		line(x-w/8,y,x+w/2.5,y)
		line(x+w/2.5,y,x+w/5,y+h/3)
	elseif num==6 then
		line(x,y-h/2,x,y-h/4)
		line(x-w/2,y-h/8,x+w/2,y-h/4)
		line(x+w/4,y+h/8,x+w/2,y+h/4)
		line(x-w/4,y+h/4,x-w/2,y+h/3)
	elseif num==7 then
		line(x-w/8,y-h/2,x-w/8,y+h/3)
		line(x-w/1.8,y+h/5,x,y-h/8)
		line(x,y-h/8,x+w/2,y-h/8)
		line(x+w/2.5,y+h/2,x-w/8,y+h/3)
	elseif num==8 then
		line(x-w/10,y-h/2,x+w/8,y+h/8)
		line(x+w/1.5,y+h/2,x+w/8,y+h/8)
		line(x-w/1.7,y+h/3,x-w/3,y-h/8)
	elseif num==9 then
		line(x-w/2,y-h/8,x+w/4,y-h/8)
		line(x+w/4,y-h/8,x,y+h/2)
		line(x+w/2,y+h/2.5,x,y+h/2)
		line(x-w/1.7,y+h/2,x,y-h/2)
	end
end

------- HONORS -------
-- 1-4 winds
-- 5-7 dragons


function hon(x,y,w,h,num)
	if num>0 and num<8 then
		--pill(x,y,w,h,RADIUS,WHITE) --base
	end
	if num<5 then
		y=y+1
	end
	x=x+w/2
	y=y+h/2
	h=h/1.2
	w=w/1.2
	if num==1 then 			-- East
		color(BLUE)
		line(x,y-h/2.5,x,y+h/3)
		line(x-w/8,y+h/4,x,y+h/3)
		line(x,y-h/20,x+w/3,y+h/5)
		line(x,y-h/20,x-w/3,y+h/5)
		rect(x-w/3,y-h/4,x+w/3+1,y-h/20)
		line(x-w/8,y-h/8,x+w/8+1,y-h/8)
		line(x-w/8,y-h/3,x+w/8+1,y-h/3)
	elseif num==2 then 		-- North
		color(BLUE)
		line(x,y-h/3,x-1,y-h/14)
		line(x-w/8,y+h/4,x+w/8+1,y+h/5)
		line(x,y+h/20,x+w/5,y-h/10)
		line(x,y+h/20,x-w/5,y-h/10)
		line(x,y+h/20,x,y+h/3)
		line(x-w/8,y+h/8,x+w/8+1,y+h/8)
		line(x-w/8,y-h/5,x+w/8+1,y-h/4)
		line(x-w/3,y,x+w/3+1,y-h/20)
		line(x-w/3,y,x-w/3,y+h/4)
		line(x+w/3+1,y-h/20,x+w/3+1,y+h/3)
		line(x+w/3-1,y+h/3,x+w/3+1,y+h/3)
	elseif num==3 then 		-- West
		color(BLUE)
		line(x-w/6,y-h/4,x+w/6+1,y-h/3.5)
		rect(x-w/3,y,x+w/3+1,y+h/3)
		line(x-w/8,y-h/10,x-w/8,y+h/5)
		line(x+w/8,y-h/10,x+w/8,y+h/6)
		line(x+w/8,y+h/6,x+w/4,y+h/6)
	elseif num==4 then 		-- South
		color(BLUE)
		h=h*1.3
		line(x-w/12,y-h/8,x-w/12,y+h/4)
		line(x+w/4,y-h/4,x+w/4,y+h/4)
		line(x+w/2,y+h/4,x+w/4,y+h/4)
		line(x+w/4,y+h/6,x+w/2,y)
		line(x-w/3,y-h/8,x-w/3,y)
		line(x-w/2.5,y+h/4,x+w/4,y-h/8)
	elseif num==5 then		-- White dragon
	elseif num==6 then 		-- Green dragon
		color(GREEN)
		w=w*1.1
		x=x-1
		line(x-w/3+1,y,x-w/10+1,y-h/3)
		line(x+w/2,y,x+w/10,y-h/3)
		line(x-w/10+1,y-h/3,x-w/4+1,y-h/3)
		line(x+w/10,y-h/3,x+w/4,y-h/2.5)
		line(x+w/12,y-h/8,x+w/2.5,y-h/3)
		line(x-w/5+1,y-h/8,x-w/3+1,y-h/4)
		line(x-w/10,y-h/20,x,y-h/20)
		line(x-w/10,y+h/4,x,y-h/20)
		line(x-w/10,y+h/4,x,y+h/5)
		line(x-w/20,y+h/2.5,x,y+h/5)
		line(x-w/20,y+h/2.5,x-w/4,y+h/3)
		line(x-w/4,y+h/4,x+w/3,y+h/5)
		line(x+w/8,y+h/2.5,x+w/3,y+h/5)
		line(x+w/8,y+h/3,x+w/3,y+h/2.5)
		line(x+w/6,y,x+w/6,y+h/10)
		line(x+w/6*2,y,x+w/6*2,y+h/10)
		line(x+w/6*2,y,x+w/6,y)
	elseif num==7 then 		-- Red dragon
		color(RED)
		line(x-w/3,y-h/4,x+w/3+1,y-h/4)
		line(x-w/4,y,x-w/3,y-h/4)
		line(x+w/4,y,x+w/3+1,y-h/4)
		line(x-w/4,y-1,x+w/4,y-1)
		line(x,y-h/2,x,y+h/2.5)
	end
end
:: util.lua
--[[pod_format="raw",created="2024-07-24 10:58:30",modified="2024-07-24 19:54:56",revision=137]]
function update_mouse()
	local	mx,my,mb=mouse()
	local mlb,mrb,mmb=mb&1>0,mb&2>0,mb&4>0
	return {mx,my,mlb,mrb,mmb}
end
:: [eoc]
